{"body":"# shafty\r\n\r\nPrototype ClojureScript functional reactive programming library. Shafty\r\nis just an experiment and shouldn't be used in production.  Shafty is\r\ncurrently in development.\r\n\r\n## Usage\r\n\r\n### Events\r\n\r\nEvents represent time-varying functions which have a finite set of\r\noccurences over time.  Create an event and generate a receiver for the\r\nevent, which can either be bound to a DOM element via an\r\naddEventListener, set as the callback for a timer, or a result of an\r\nXmlHttpRequest.\r\n\r\n```clojure\r\n(def my-event (shafty/event))\r\n\r\n(def my-event-receiver (shafty/generate-receiver my-event\r\n                                          (fn [x] (identity x))))\r\n```\r\n\r\nCompose event streams using filter!, map!, reduce!, etc.\r\n\r\n```clojure\r\n(def my-filtered-event (shafty/filter! my-event\r\n                                (fn [x] (= 1 x))))\r\n\r\n(def my-mapped-event (shafty/map! my-event\r\n                           (fn [x] (identity 1))))\r\n```\r\n\r\nBehaviours are time-varying functions which constantly have a value.\r\nDerive a behaviour from an event, or generate a receiver to watch a\r\nparticular DOM element, such as an input field.\r\n\r\n```clojure\r\n(def my-behaviour-of-ones (shafty/hold! my-filtered-event 2))\r\n```\r\n\r\n## TODO\r\n\r\n* Don't use watchers, store a sink of nodes to propgate forward to, and\r\n  call a selection-fn on the members of the sink.\r\n* Investigate adding sources vector to Event/Behaviour.\r\n* Add to IEventStream:\r\n  * reduce!\r\n  * ~~merge!~~\r\n  * delay!\r\n* Behaviours value should only change when deref'd?\r\n* Text box save example.\r\n\r\n## License\r\n\r\nCopyright (C) 2012 Christopher Meiklejohn.\r\n\r\nDistributed under the Eclipse Public License, the same as Clojure.\r\n","tagline":"Prototype ClojureScript functional reactive programming library.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Shafty"}