{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Shafty","tagline":"Prototype ClojureScript functional reactive programming library.","google":"","body":"# shafty\r\n\r\nClojureScript functional reactive programming library.\r\n\r\n## Disclaimer\r\n\r\nShafty is currently under development and the API is subject to change.  Shafty shouldn't be used in production.\r\n\r\nGet in touch if you are interested in helping out.\r\n\r\n## Usage\r\n\r\n### Events\r\n\r\nEvents represent time-varying functions which have a finite set of\r\noccurences over time.\r\n\r\n```clojure\r\n(def my-event (shafty/event))\r\n```\r\n\r\nCompose event streams using filter!, map!, reduce!, etc.\r\n\r\n```clojure\r\n(def my-filtered-event (shafty/filter! my-event\r\n                                (fn [x] (= 1 x))))\r\n\r\n(def my-mapped-event (shafty/map! my-event\r\n                           (fn [x] (identity 1))))\r\n\r\n(def my-combo-event (shafty/merge! my-filtered-event\r\n                                   my-mapped-event))\r\n\r\n(def my-delayed-event (shafty/delay! my-filtered-event 50000)\r\n```\r\n\r\n### Behaviours\r\n\r\nBehaviours are time-varying functions which constantly have a value. Derive a behaviour from an event, or generate a receiver to watch a particular DOM element, such as an input field.\r\n\r\nBehaviours share the same IEventStream protocol, so you can also use merge!, delay!, map!, filter!, etc. to compose them.\r\n\r\nYou can also call changes! to convert a Behaviour back to an Event.\r\n\r\n```clojure\r\n(def my-behaviour-of-ones (shafty/hold! my-filtered-event 1))\r\n\r\n(def my-behaviour-as-event (shafty/changes! my-behaviour-of-ones))\r\n```\r\n\r\n## Examples\r\n\r\nThe repository contains a series of examples in the\r\n```shafty.examples``` namespace. Included below is a simple example of a Google-docs like autosave feature built using shafty.\r\n\r\n```clojure\r\n(ns shafty.examples.autosave\r\n  (:use [shafty.observable :only [bind! bind-timer! bind-behaviour!]]\r\n        [shafty.event-stream :only [merge! map!]])\r\n  (:require [goog.dom :as dom]))\r\n\r\n(defn- update-save-status []\r\n  (let [element (dom/getElement \"save-status\")\r\n        curtime (js/Date)\r\n        textarea (deref b1)]\r\n    (set! (.-innerHTML element) (str \"Last save at \" curtime))))\r\n\r\n(defn main []\r\n  \"Run the autosave example\"\r\n\r\n  (let [e1 (bind-timer! 5000)\r\n        e2 (bind! (dom/getElement \"save-button\") \"click\")\r\n        e3 (merge! e1 e2)\r\n        e4 (map! e3 update-save-status)\r\n        b1 (bind! (dom/getElement \"data\"))]\r\n    (.log js/console \"Running autosave example.\")))\r\n```\r\n\r\n## References\r\n\r\n* Elliott, [_Push-Pull Functional Reactive Programming_](http://dl.acm.org/citation.cfm?id=1596643)\r\n* Meyerovich, [_Flapjax: Functional Reactive Web Programming_](http://www.cs.brown.edu/research/pubs/theses/ugrad/2007/lmeyerov.pdf)\r\n* Meyerovich, Guha, Baskin, Cooper, Greenberg, Bromfield,  Krishnamurthi, [_Flapjax: A Programming Language for Ajax Applications_](http://dl.acm.org/citation.cfm?id=1640091)\r\n\r\n## License\r\n\r\nCopyright (C) 2012 Christopher Meiklejohn.\r\n\r\nDistributed under the Eclipse Public License, the same as Clojure.\r\n"}