{"google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Shafty","tagline":"ClojureScript functional reactive programming library.","body":"# shafty\r\n\r\nClojureScript functional reactive programming library.\r\n\r\n## Disclaimer\r\n\r\nShafty is currently under development and the API is subject to change.\r\n\r\nShafty shouldn't be used in production.\r\n\r\nGet in touch if you are interested in helping out.\r\n\r\n## Usage\r\n\r\n### Events\r\n\r\nEvents represent time-varying functions which have a finite set of\r\noccurences over time.\r\n\r\n### Behaviours\r\n\r\nBehaviours are time-varying functions which constantly have a value.\r\nDerive a behaviour from an event, or generate a receiver to watch a\r\nparticular DOM element, such as an input field.\r\n\r\n## Incomplete\r\n\r\n* Switching.\r\n* Clean up repetition in shafty.event.\r\n\r\n## References\r\n\r\n* Elliott, [_Push-Pull Functional Reactive Programming_](http://dl.acm.org/citation.cfm?id=1596643)\r\n* Meyerovich, [_Flapjax: Functional Reactive Web Programming_](http://www.cs.brown.edu/research/pubs/theses/ugrad/2007/lmeyerov.pdf)\r\n* Meyerovich, Guha, Baskin, Cooper, Greenberg, Bromfield,  Krishnamurthi, [_Flapjax: A Programming Language for Ajax Applications_](http://dl.acm.org/citation.cfm?id=1640091)\r\n\r\n## Examples\r\n\r\n### Elapsed Timer\r\n\r\n```clojure\r\n(defn- timer []\r\n  \"Generate a timer, and convert the timer into a behaviour.\"\r\n  (-> (timer! 1000 (fn [] (js/Date.)))\r\n      (map! (fn [x] (.log js/console \"Timer ticked.\") x))\r\n      (hold! (js/Date.))))\r\n\r\n(defn- reset [timer]\r\n  \"Generate a behaviour originating from click events on the reset\r\n  button.  When clicked, snapshot the current state of the timer.\"\r\n  (-> (event! (dom/getElement \"reset-button\") \"click\")\r\n      (snapshot! timer)\r\n      (map! (fn [x] (.log js/console \"Reset button clicked.\") x))\r\n      (hold! (js/Date.))))\r\n\r\n(defn main []\r\n  \"Run the elapsed time example.\"\r\n\r\n  (let [the-timer (timer)\r\n        reset-button (reset the-timer)]\r\n    (-> (lift2! the-timer reset-button (fn [now click] (- now click)) 0)\r\n        (insert! (dom/getElement \"elapsed\"))))\r\n\r\n  (.log js/console \"Starting the elapsed time example.\"))\r\n```\r\n\r\n### Autosave\r\n\r\n```clojure\r\n(defn- build-request [value]\r\n  \"Generate a request object.\"\r\n  { :url \"/save\" :data { :value value } :method \"post\" })\r\n\r\n(defn- live-content []\r\n  \"Generate a behaviour for the live content area.\"\r\n  (behaviour! (dom/getElement \"live-content\") nil))\r\n\r\n(defn- timer []\r\n  \"Generate a timer.\"\r\n  (-> (timer! 10000 (fn [] (js/Date.)))\r\n      (map! (fn [x] (.log js/console \"Timer ticked.\") x))))\r\n\r\n(defn main []\r\n  \"Run the autosave example.\"\r\n\r\n  (-> (event! (dom/getElement \"save-button\") \"click\")\r\n      (map! (fn [x] (.log js/console \"Button clicked.\") x))\r\n      (merge! (timer))\r\n      (snapshot! (live-content))\r\n      (map! build-request)\r\n      (requests!))\r\n\r\n  (.log js/console \"Starting the autosave example.\"))\r\n```\r\n\r\n## The Name\r\n\r\n* [Shafty, Island Tour, '98, Providence, RI.](http://www.youtube.com/watch?v=AZO2_u0jmZk)\r\n\r\n## License\r\n\r\nCopyright (C) 2012 Christopher Meiklejohn.\r\n\r\nDistributed under the Eclipse Public License, the same as Clojure.\r\n"}